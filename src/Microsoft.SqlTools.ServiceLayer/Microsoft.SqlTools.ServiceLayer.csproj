<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<TargetFramework>$(ServiceLayerTargetFramework)</TargetFramework>
		<AssemblyName>MicrosoftSqlToolsServiceLayer</AssemblyName>
		<OutputType>Exe</OutputType>
		<EnableDefaultItems>false</EnableDefaultItems> 
		<EnableDefaultCompileItems>false</EnableDefaultCompileItems>
		<EnableDefaultEmbeddedResourceItems>false</EnableDefaultEmbeddedResourceItems>
		<EnableDefaultNoneItems>false</EnableDefaultNoneItems>
		<EmbeddedResourceUseDependentUponConvention>false</EmbeddedResourceUseDependentUponConvention>
		<GenerateAssemblyInfo>false</GenerateAssemblyInfo>
		<DefineConstants>$(DefineConstants);NETCOREAPP1_0;TRACE</DefineConstants>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<PreserveCompilationContext>true</PreserveCompilationContext>
		<RuntimeIdentifiers>win7-x64;win7-x86;ubuntu.14.04-x64;ubuntu.16.04-x64;centos.7-x64;rhel.7.2-x64;debian.8-x64;fedora.23-x64;opensuse.13.2-x64;osx.10.11-x64;linux-x64;win10-arm;win10-arm64</RuntimeIdentifiers>
	</PropertyGroup>

	<PropertyGroup>
		<GenerateRuntimeConfigurationFiles>true</GenerateRuntimeConfigurationFiles>
	</PropertyGroup>

	<!-- Reference for runtime identifiers (RID): https://docs.microsoft.com/en-us/dotnet/core/rid-catalog -->
	<Choose>
		<!-- When a RID is specified, we'll get SqlPackage executables from same platform as RID. -->
		<When Condition=" '$(RuntimeIdentifier)' != '' ">
			<PropertyGroup>
				<SqlpackageDir Condition=" '$(RuntimeIdentifier.Substring(0, 3))' == 'win' ">win7-x64</SqlpackageDir>
				<SqlpackageDir Condition=" '$(RuntimeIdentifier.Substring(0, 3))' == 'osx' ">osx-x64</SqlpackageDir>
				<SqlpackageDir Condition=" '$(RuntimeIdentifier.Substring(0, 5))' == 'linux' Or '$(RuntimeIdentifier).Substring(0, 5)' == 'tizen' Or '$(RuntimeIdentifier).Substring(0, 4)' == 'rhel' ">linux-x64</SqlpackageDir>
			</PropertyGroup>
		</When>
		<!-- When no RID is specified, we'll get SqlPackage executables based on current machine platform. -->
		<When Condition=" '$(RuntimeIdentifier)' == '' ">
			<PropertyGroup>
				<SqlpackageDir Condition=" '$(OS)' == 'Windows_NT' ">win7-x64</SqlpackageDir>
				<SqlpackageDir Condition=" '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::Linux)))' ">osx-x64</SqlpackageDir>
				<SqlpackageDir Condition=" '$([System.Runtime.InteropServices.RuntimeInformation]::IsOSPlatform($([System.Runtime.InteropServices.OSPlatform]::OSX)))' ">linux-x64</SqlpackageDir>
			</PropertyGroup>
		</When>
	</Choose>

	<ItemGroup>
		<PackageReference Include="Microsoft.SqlServer.DACFx" />
		<PackageReference Include="Microsoft.Data.SqlClient.AlwaysEncrypted.AzureKeyVaultProvider" />
		<PackageReference Include="System.Text.Encoding.CodePages" />
		<PackageReference Include="Microsoft.SqlServer.Assessment" />
		<PackageReference Include="Microsoft.SqlServer.Migration.Assessment" />
		<PackageReference Include="System.Text.Encoding.CodePages" />
		<PackageReference Include="Microsoft.SqlServer.TransactSql.ScriptDom.NRT">
			<Aliases>ASAScriptDom</Aliases>
		</PackageReference>
	</ItemGroup>
	<ItemGroup>
		<Compile Include="**\*.cs" Exclude="**/obj/**/*.cs" />
	</ItemGroup>
	<ItemGroup>
		<ProjectReference Include="../Microsoft.SqlTools.Hosting/Microsoft.SqlTools.Hosting.csproj" />
		<ProjectReference Include="../Microsoft.SqlTools.Credentials/Microsoft.SqlTools.Credentials.csproj" />
		<ProjectReference Include="../Microsoft.SqlTools.ManagedBatchParser/Microsoft.SqlTools.ManagedBatchParser.csproj" />
		<ProjectReference Include="../Microsoft.InsightsGenerator/Microsoft.InsightsGenerator.csproj" />
	</ItemGroup>
	<ItemGroup>
		<Content Include="$(PkgMicrosoft_SqlServer_DacFx)\tools\netstandard2.0\$(SqlpackageDir)\**" Condition=" '$(SqlpackageDir)' != '' ">
			<CopyToOutputDirectory>Always</CopyToOutputDirectory>
		</Content>
		<Content Include="$(PkgMicrosoft_SqlServer_DacFx)\lib\netstandard2.0\Microsoft.Data.Tools.Schema.SqlTasks.targets">
			<CopyToPublishDirectory>Always</CopyToPublishDirectory>
		</Content>
		<Content Include="..\..\Notice.txt">
			<CopyToOutputDirectory>Always</CopyToOutputDirectory>
		</Content>
		<Content Include=".\Migration\Metadata\**">
			<Link>%(RecursiveDir)%(Filename)%(Extension)</Link>
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		</Content>
		<EmbeddedResource Include="ObjectExplorer\SmoModel\TreeNodeDefinition.xml" />
		<EmbeddedResource Include="Localization\*.resx" />
		<None Include="Localization\sr.strings" />
	</ItemGroup>
	<ItemGroup>
		<EmbeddedResource Include=".\Agent\NotebookResources\NotebookJobScript.ps1" />
	</ItemGroup>
	<!-- this target enables dependency files to be copied as part of the output of ProjectReference.
	https://github.com/dotnet/sdk/issues/1675
	 -->
	<Target Name="AddRuntimeDependenciesToContent" Condition="'$(TargetFrameworkIdentifier)' == '.NETCoreApp'" BeforeTargets="GetCopyToOutputDirectoryItems" DependsOnTargets="GenerateBuildDependencyFile;&#xD;&#xA;							GenerateBuildRuntimeConfigurationFiles">
		<ItemGroup>
			<ContentWithTargetPath Include="$(ProjectDepsFilePath)" Condition="'$(GenerateDependencyFile)' == 'true'" CopyToOutputDirectory="PreserveNewest" TargetPath="$(ProjectDepsFileName)" />
			<ContentWithTargetPath Include="$(ProjectRuntimeConfigFilePath)" Condition="'$(GenerateRuntimeConfigurationFiles)' == 'true'" CopyToOutputDirectory="PreserveNewest" TargetPath="$(ProjectRuntimeConfigFileName)" />
		</ItemGroup>
	</Target>

	<!-- zijchen: Testing code, remove -->
	<Target Name="TestMessage" AfterTargets="Build">
		<Message Text="RID: $(RuntimeIdentifier)" Importance="high"/>
		<Message Text="Using Sqlpackage Dir: $(SqlpackageDir)" Importance="high"/>
	</Target>
</Project>
